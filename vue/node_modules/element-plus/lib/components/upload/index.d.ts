import type { SFCWithInstall } from 'element-plus/es/utils/types';
declare const _Upload: SFCWithInstall<import("vue").DefineComponent<{
    action: {
        type: StringConstructor;
        required: true;
    };
    headers: {
        type: import("vue").PropType<Headers>;
        default: () => {};
    };
    data: {
        type: ObjectConstructor;
        default: () => {};
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    drag: {
        type: BooleanConstructor;
        default: boolean;
    };
    withCredentials: BooleanConstructor;
    showFileList: {
        type: BooleanConstructor;
        default: boolean;
    };
    accept: {
        type: StringConstructor;
        default: string;
    };
    type: {
        type: StringConstructor;
        default: string;
    };
    beforeUpload: {
        type: ((new (...args: any[]) => import("./src/upload.type").FileHandler<void>) | (() => import("./src/upload.type").FileHandler<void>) | {
            (): import("./src/upload.type").FileHandler<void>;
            new (): any;
            readonly prototype: any;
        }) | ((new (...args: any[]) => import("./src/upload.type").FileHandler<void>) | (() => import("./src/upload.type").FileHandler<void>) | {
            (): import("./src/upload.type").FileHandler<void>;
            new (): any;
            readonly prototype: any;
        })[];
        default: () => void;
    };
    beforeRemove: {
        type: ((new (...args: any[]) => import("./src/upload.type").FileHandler<boolean>) | (() => import("./src/upload.type").FileHandler<boolean>) | {
            (): import("./src/upload.type").FileHandler<boolean>;
            new (): any;
            readonly prototype: any;
        }) | ((new (...args: any[]) => import("./src/upload.type").FileHandler<boolean>) | (() => import("./src/upload.type").FileHandler<boolean>) | {
            (): import("./src/upload.type").FileHandler<boolean>;
            new (): any;
            readonly prototype: any;
        })[];
        default: () => void;
    };
    onRemove: {
        type: ((new (...args: any[]) => import("./src/upload.type").FileHandler<void>) | (() => import("./src/upload.type").FileHandler<void>) | {
            (): import("./src/upload.type").FileHandler<void>;
            new (): any;
            readonly prototype: any;
        }) | ((new (...args: any[]) => import("./src/upload.type").FileHandler<void>) | (() => import("./src/upload.type").FileHandler<void>) | {
            (): import("./src/upload.type").FileHandler<void>;
            new (): any;
            readonly prototype: any;
        })[];
        default: () => void;
    };
    onChange: {
        type: ((new (...args: any[]) => import("./src/upload.type").FileHandler<void>) | (() => import("./src/upload.type").FileHandler<void>) | {
            (): import("./src/upload.type").FileHandler<void>;
            new (): any;
            readonly prototype: any;
        }) | ((new (...args: any[]) => import("./src/upload.type").FileHandler<void>) | (() => import("./src/upload.type").FileHandler<void>) | {
            (): import("./src/upload.type").FileHandler<void>;
            new (): any;
            readonly prototype: any;
        })[];
        default: () => void;
    };
    onPreview: {
        type: import("vue").PropType<() => void>;
        default: () => void;
    };
    onSuccess: {
        type: ((new (...args: any[]) => import("./src/upload.type").FileResultHandler<any>) | (() => import("./src/upload.type").FileResultHandler<any>) | {
            (): import("./src/upload.type").FileResultHandler<any>;
            new (): any;
            readonly prototype: any;
        }) | ((new (...args: any[]) => import("./src/upload.type").FileResultHandler<any>) | (() => import("./src/upload.type").FileResultHandler<any>) | {
            (): import("./src/upload.type").FileResultHandler<any>;
            new (): any;
            readonly prototype: any;
        })[];
        default: () => void;
    };
    onProgress: {
        type: ((new (...args: any[]) => import("./src/upload.type").FileResultHandler<ProgressEvent<EventTarget>>) | (() => import("./src/upload.type").FileResultHandler<ProgressEvent<EventTarget>>) | {
            (): import("./src/upload.type").FileResultHandler<ProgressEvent<EventTarget>>;
            new (): any;
            readonly prototype: any;
        }) | ((new (...args: any[]) => import("./src/upload.type").FileResultHandler<ProgressEvent<EventTarget>>) | (() => import("./src/upload.type").FileResultHandler<ProgressEvent<EventTarget>>) | {
            (): import("./src/upload.type").FileResultHandler<ProgressEvent<EventTarget>>;
            new (): any;
            readonly prototype: any;
        })[];
        default: () => void;
    };
    onError: {
        type: ((new (...args: any[]) => import("./src/upload.type").FileResultHandler<Error>) | (() => import("./src/upload.type").FileResultHandler<Error>) | {
            (): import("./src/upload.type").FileResultHandler<Error>;
            new (): any;
            readonly prototype: any;
        }) | ((new (...args: any[]) => import("./src/upload.type").FileResultHandler<Error>) | (() => import("./src/upload.type").FileResultHandler<Error>) | {
            (): import("./src/upload.type").FileResultHandler<Error>;
            new (): any;
            readonly prototype: any;
        })[];
        default: () => void;
    };
    fileList: {
        type: import("vue").PropType<import("./src/upload.type").UploadFile[]>;
        default: () => import("./src/upload.type").UploadFile[];
    };
    autoUpload: {
        type: BooleanConstructor;
        default: boolean;
    };
    listType: {
        type: import("vue").PropType<import("./src/upload.type").ListType>;
        default: import("./src/upload.type").ListType;
    };
    httpRequest: {
        type: FunctionConstructor;
        default: typeof import("./src/ajax").default;
    };
    disabled: BooleanConstructor;
    limit: {
        type: import("vue").PropType<number>;
        default: any;
    };
    onExceed: {
        type: FunctionConstructor;
        default: () => () => void;
    };
}, {
    abort: (file: import("./src/upload.type").UploadFile) => void;
    dragOver: import("vue").Ref<boolean>;
    draging: import("vue").Ref<boolean>;
    handleError: (err: Error, rawFile: import("./src/upload.type").ElFile) => void;
    handleProgress: (ev: import("./src/upload.type").ElUploadProgressEvent, rawFile: import("./src/upload.type").ElFile) => void;
    handleRemove: (file: import("./src/upload.type").UploadFile, raw: import("./src/upload.type").ElFile) => void;
    handleStart: (rawFile: import("./src/upload.type").ElFile) => void;
    handleSuccess: (res: any, rawFile: import("./src/upload.type").ElFile) => void;
    uploadDisabled: import("vue").ComputedRef<boolean>;
    uploadFiles: import("vue").Ref<{
        name: string;
        percentage?: number;
        status: import("./src/upload.type").UploadStatus;
        size: number;
        response?: unknown;
        uid: number;
        url?: string;
        raw: {
            uid: number;
            readonly lastModified: number;
            readonly name: string;
            readonly size: number;
            readonly type: string;
            arrayBuffer: () => Promise<ArrayBuffer>;
            slice: (start?: number, end?: number, contentType?: string) => Blob;
            stream: () => ReadableStream<any>;
            text: () => Promise<string>;
        };
    }[]>;
    uploadRef: import("vue").Ref<{
        abort: (file: import("./src/upload.type").UploadFile) => void;
        upload: (file: import("./src/upload.type").ElFile) => void;
    }>;
    submit: () => void;
    clearFiles: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    drag: boolean;
    data: Record<string, any>;
    type: string;
    name: string;
    disabled: boolean;
    multiple: boolean;
    onChange: import("./src/upload.type").FileHandler<void>;
    withCredentials: boolean;
    listType: import("./src/upload.type").ListType;
    action: string;
    headers: Headers;
    accept: string;
    onProgress: import("./src/upload.type").FileResultHandler<ProgressEvent<EventTarget>>;
    onSuccess: import("./src/upload.type").FileResultHandler<any>;
    onError: import("./src/upload.type").FileResultHandler<Error>;
    beforeUpload: import("./src/upload.type").FileHandler<void>;
    onPreview: () => void;
    onRemove: import("./src/upload.type").FileHandler<void>;
    fileList: import("./src/upload.type").UploadFile[];
    autoUpload: boolean;
    httpRequest: Function;
    onExceed: Function;
    showFileList: boolean;
    beforeRemove: import("./src/upload.type").FileHandler<boolean>;
} & {
    limit?: number;
}>, {
    drag: boolean;
    data: Record<string, any>;
    type: string;
    name: string;
    disabled: boolean;
    multiple: boolean;
    onChange: import("./src/upload.type").FileHandler<void>;
    withCredentials: boolean;
    listType: import("./src/upload.type").ListType;
    headers: Headers;
    accept: string;
    onProgress: import("./src/upload.type").FileResultHandler<ProgressEvent<EventTarget>>;
    onSuccess: import("./src/upload.type").FileResultHandler<any>;
    onError: import("./src/upload.type").FileResultHandler<Error>;
    beforeUpload: import("./src/upload.type").FileHandler<void>;
    onPreview: () => void;
    onRemove: import("./src/upload.type").FileHandler<void>;
    fileList: import("./src/upload.type").UploadFile[];
    autoUpload: boolean;
    httpRequest: Function;
    limit: number;
    onExceed: Function;
    showFileList: boolean;
    beforeRemove: import("./src/upload.type").FileHandler<boolean>;
}>>;
export default _Upload;
export declare const ElUpload: SFCWithInstall<import("vue").DefineComponent<{
    action: {
        type: StringConstructor;
        required: true;
    };
    headers: {
        type: import("vue").PropType<Headers>;
        default: () => {};
    };
    data: {
        type: ObjectConstructor;
        default: () => {};
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    drag: {
        type: BooleanConstructor;
        default: boolean;
    };
    withCredentials: BooleanConstructor;
    showFileList: {
        type: BooleanConstructor;
        default: boolean;
    };
    accept: {
        type: StringConstructor;
        default: string;
    };
    type: {
        type: StringConstructor;
        default: string;
    };
    beforeUpload: {
        type: ((new (...args: any[]) => import("./src/upload.type").FileHandler<void>) | (() => import("./src/upload.type").FileHandler<void>) | {
            (): import("./src/upload.type").FileHandler<void>;
            new (): any;
            readonly prototype: any;
        }) | ((new (...args: any[]) => import("./src/upload.type").FileHandler<void>) | (() => import("./src/upload.type").FileHandler<void>) | {
            (): import("./src/upload.type").FileHandler<void>;
            new (): any;
            readonly prototype: any;
        })[];
        default: () => void;
    };
    beforeRemove: {
        type: ((new (...args: any[]) => import("./src/upload.type").FileHandler<boolean>) | (() => import("./src/upload.type").FileHandler<boolean>) | {
            (): import("./src/upload.type").FileHandler<boolean>;
            new (): any;
            readonly prototype: any;
        }) | ((new (...args: any[]) => import("./src/upload.type").FileHandler<boolean>) | (() => import("./src/upload.type").FileHandler<boolean>) | {
            (): import("./src/upload.type").FileHandler<boolean>;
            new (): any;
            readonly prototype: any;
        })[];
        default: () => void;
    };
    onRemove: {
        type: ((new (...args: any[]) => import("./src/upload.type").FileHandler<void>) | (() => import("./src/upload.type").FileHandler<void>) | {
            (): import("./src/upload.type").FileHandler<void>;
            new (): any;
            readonly prototype: any;
        }) | ((new (...args: any[]) => import("./src/upload.type").FileHandler<void>) | (() => import("./src/upload.type").FileHandler<void>) | {
            (): import("./src/upload.type").FileHandler<void>;
            new (): any;
            readonly prototype: any;
        })[];
        default: () => void;
    };
    onChange: {
        type: ((new (...args: any[]) => import("./src/upload.type").FileHandler<void>) | (() => import("./src/upload.type").FileHandler<void>) | {
            (): import("./src/upload.type").FileHandler<void>;
            new (): any;
            readonly prototype: any;
        }) | ((new (...args: any[]) => import("./src/upload.type").FileHandler<void>) | (() => import("./src/upload.type").FileHandler<void>) | {
            (): import("./src/upload.type").FileHandler<void>;
            new (): any;
            readonly prototype: any;
        })[];
        default: () => void;
    };
    onPreview: {
        type: import("vue").PropType<() => void>;
        default: () => void;
    };
    onSuccess: {
        type: ((new (...args: any[]) => import("./src/upload.type").FileResultHandler<any>) | (() => import("./src/upload.type").FileResultHandler<any>) | {
            (): import("./src/upload.type").FileResultHandler<any>;
            new (): any;
            readonly prototype: any;
        }) | ((new (...args: any[]) => import("./src/upload.type").FileResultHandler<any>) | (() => import("./src/upload.type").FileResultHandler<any>) | {
            (): import("./src/upload.type").FileResultHandler<any>;
            new (): any;
            readonly prototype: any;
        })[];
        default: () => void;
    };
    onProgress: {
        type: ((new (...args: any[]) => import("./src/upload.type").FileResultHandler<ProgressEvent<EventTarget>>) | (() => import("./src/upload.type").FileResultHandler<ProgressEvent<EventTarget>>) | {
            (): import("./src/upload.type").FileResultHandler<ProgressEvent<EventTarget>>;
            new (): any;
            readonly prototype: any;
        }) | ((new (...args: any[]) => import("./src/upload.type").FileResultHandler<ProgressEvent<EventTarget>>) | (() => import("./src/upload.type").FileResultHandler<ProgressEvent<EventTarget>>) | {
            (): import("./src/upload.type").FileResultHandler<ProgressEvent<EventTarget>>;
            new (): any;
            readonly prototype: any;
        })[];
        default: () => void;
    };
    onError: {
        type: ((new (...args: any[]) => import("./src/upload.type").FileResultHandler<Error>) | (() => import("./src/upload.type").FileResultHandler<Error>) | {
            (): import("./src/upload.type").FileResultHandler<Error>;
            new (): any;
            readonly prototype: any;
        }) | ((new (...args: any[]) => import("./src/upload.type").FileResultHandler<Error>) | (() => import("./src/upload.type").FileResultHandler<Error>) | {
            (): import("./src/upload.type").FileResultHandler<Error>;
            new (): any;
            readonly prototype: any;
        })[];
        default: () => void;
    };
    fileList: {
        type: import("vue").PropType<import("./src/upload.type").UploadFile[]>;
        default: () => import("./src/upload.type").UploadFile[];
    };
    autoUpload: {
        type: BooleanConstructor;
        default: boolean;
    };
    listType: {
        type: import("vue").PropType<import("./src/upload.type").ListType>;
        default: import("./src/upload.type").ListType;
    };
    httpRequest: {
        type: FunctionConstructor;
        default: typeof import("./src/ajax").default;
    };
    disabled: BooleanConstructor;
    limit: {
        type: import("vue").PropType<number>;
        default: any;
    };
    onExceed: {
        type: FunctionConstructor;
        default: () => () => void;
    };
}, {
    abort: (file: import("./src/upload.type").UploadFile) => void;
    dragOver: import("vue").Ref<boolean>;
    draging: import("vue").Ref<boolean>;
    handleError: (err: Error, rawFile: import("./src/upload.type").ElFile) => void;
    handleProgress: (ev: import("./src/upload.type").ElUploadProgressEvent, rawFile: import("./src/upload.type").ElFile) => void;
    handleRemove: (file: import("./src/upload.type").UploadFile, raw: import("./src/upload.type").ElFile) => void;
    handleStart: (rawFile: import("./src/upload.type").ElFile) => void;
    handleSuccess: (res: any, rawFile: import("./src/upload.type").ElFile) => void;
    uploadDisabled: import("vue").ComputedRef<boolean>;
    uploadFiles: import("vue").Ref<{
        name: string;
        percentage?: number;
        status: import("./src/upload.type").UploadStatus;
        size: number;
        response?: unknown;
        uid: number;
        url?: string;
        raw: {
            uid: number;
            readonly lastModified: number;
            readonly name: string;
            readonly size: number;
            readonly type: string;
            arrayBuffer: () => Promise<ArrayBuffer>;
            slice: (start?: number, end?: number, contentType?: string) => Blob;
            stream: () => ReadableStream<any>;
            text: () => Promise<string>;
        };
    }[]>;
    uploadRef: import("vue").Ref<{
        abort: (file: import("./src/upload.type").UploadFile) => void;
        upload: (file: import("./src/upload.type").ElFile) => void;
    }>;
    submit: () => void;
    clearFiles: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    drag: boolean;
    data: Record<string, any>;
    type: string;
    name: string;
    disabled: boolean;
    multiple: boolean;
    onChange: import("./src/upload.type").FileHandler<void>;
    withCredentials: boolean;
    listType: import("./src/upload.type").ListType;
    action: string;
    headers: Headers;
    accept: string;
    onProgress: import("./src/upload.type").FileResultHandler<ProgressEvent<EventTarget>>;
    onSuccess: import("./src/upload.type").FileResultHandler<any>;
    onError: import("./src/upload.type").FileResultHandler<Error>;
    beforeUpload: import("./src/upload.type").FileHandler<void>;
    onPreview: () => void;
    onRemove: import("./src/upload.type").FileHandler<void>;
    fileList: import("./src/upload.type").UploadFile[];
    autoUpload: boolean;
    httpRequest: Function;
    onExceed: Function;
    showFileList: boolean;
    beforeRemove: import("./src/upload.type").FileHandler<boolean>;
} & {
    limit?: number;
}>, {
    drag: boolean;
    data: Record<string, any>;
    type: string;
    name: string;
    disabled: boolean;
    multiple: boolean;
    onChange: import("./src/upload.type").FileHandler<void>;
    withCredentials: boolean;
    listType: import("./src/upload.type").ListType;
    headers: Headers;
    accept: string;
    onProgress: import("./src/upload.type").FileResultHandler<ProgressEvent<EventTarget>>;
    onSuccess: import("./src/upload.type").FileResultHandler<any>;
    onError: import("./src/upload.type").FileResultHandler<Error>;
    beforeUpload: import("./src/upload.type").FileHandler<void>;
    onPreview: () => void;
    onRemove: import("./src/upload.type").FileHandler<void>;
    fileList: import("./src/upload.type").UploadFile[];
    autoUpload: boolean;
    httpRequest: Function;
    limit: number;
    onExceed: Function;
    showFileList: boolean;
    beforeRemove: import("./src/upload.type").FileHandler<boolean>;
}>>;
