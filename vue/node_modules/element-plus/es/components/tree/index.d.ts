import type { SFCWithInstall } from 'element-plus/es/utils/types';
declare const _Tree: SFCWithInstall<import("vue").DefineComponent<{
    data: {
        type: ArrayConstructor;
    };
    emptyText: {
        type: StringConstructor;
    };
    renderAfterExpand: {
        type: BooleanConstructor;
        default: boolean;
    };
    nodeKey: StringConstructor;
    checkStrictly: BooleanConstructor;
    defaultExpandAll: BooleanConstructor;
    expandOnClickNode: {
        type: BooleanConstructor;
        default: boolean;
    };
    checkOnClickNode: BooleanConstructor;
    checkDescendants: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoExpandParent: {
        type: BooleanConstructor;
        default: boolean;
    };
    defaultCheckedKeys: ArrayConstructor;
    defaultExpandedKeys: ArrayConstructor;
    currentNodeKey: import("vue").PropType<string | number>;
    renderContent: FunctionConstructor;
    showCheckbox: {
        type: BooleanConstructor;
        default: boolean;
    };
    draggable: {
        type: BooleanConstructor;
        default: boolean;
    };
    allowDrag: FunctionConstructor;
    allowDrop: FunctionConstructor;
    props: {
        type: ObjectConstructor;
        default(): {
            children: string;
            label: string;
            disabled: string;
        };
    };
    lazy: {
        type: BooleanConstructor;
        default: boolean;
    };
    highlightCurrent: BooleanConstructor;
    load: FunctionConstructor;
    filterNodeMethod: FunctionConstructor;
    accordion: BooleanConstructor;
    indent: {
        type: NumberConstructor;
        default: number;
    };
    iconClass: StringConstructor;
}, {
    store: import("vue").Ref<{
        currentNode: {
            id: number;
            text: string;
            checked: boolean;
            indeterminate: boolean;
            data: {
                [x: string]: any;
            };
            expanded: boolean;
            parent: any;
            visible: boolean;
            isCurrent: boolean;
            store: any;
            isLeafByUser: boolean;
            isLeaf: boolean;
            canFocus: boolean;
            level: number;
            loaded: boolean;
            childNodes: any[];
            loading: boolean;
            initialize: () => void;
            setData: (data: import("./src/tree.type").TreeNodeData) => void;
            readonly label: string;
            readonly key: import("./src/tree.type").TreeKey;
            readonly disabled: boolean;
            readonly nextSibling: any;
            readonly previousSibling: any;
            contains: (target: import("./src/model/node").default, deep?: boolean) => boolean;
            remove: () => void;
            insertChild: (child?: import("./src/model/node").default | import("./src/tree.type").FakeNode, index?: number, batch?: boolean) => void;
            insertBefore: (child: import("./src/model/node").default | import("./src/tree.type").FakeNode, ref: import("./src/model/node").default) => void;
            insertAfter: (child: import("./src/model/node").default | import("./src/tree.type").FakeNode, ref: import("./src/model/node").default) => void;
            removeChild: (child: import("./src/model/node").default) => void;
            removeChildByData: (data: import("./src/tree.type").TreeNodeData) => void;
            expand: (callback?: () => void, expandParent?: boolean) => void;
            doCreateChildren: (array: import("./src/tree.type").TreeNodeData[], defaultProps?: import("./src/tree.type").TreeNodeLoadedDefaultProps) => void;
            collapse: () => void;
            shouldLoadData: () => boolean;
            updateLeafState: () => void;
            setChecked: (value?: string | boolean, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
            getChildren: (forceInit?: boolean) => import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeNodeData[];
            updateChildren: () => void;
            loadData: (callback: (node: import("./src/model/node").default) => void, defaultProps?: import("./src/tree.type").TreeNodeLoadedDefaultProps) => void;
        };
        currentNodeKey: import("./src/tree.type").TreeKey;
        nodesMap: {
            [x: string]: {
                id: number;
                text: string;
                checked: boolean;
                indeterminate: boolean;
                data: {
                    [x: string]: any;
                };
                expanded: boolean;
                parent: any;
                visible: boolean;
                isCurrent: boolean;
                store: any;
                isLeafByUser: boolean;
                isLeaf: boolean;
                canFocus: boolean;
                level: number;
                loaded: boolean;
                childNodes: any[];
                loading: boolean;
                initialize: () => void;
                setData: (data: import("./src/tree.type").TreeNodeData) => void;
                readonly label: string;
                readonly key: import("./src/tree.type").TreeKey;
                readonly disabled: boolean;
                readonly nextSibling: any;
                readonly previousSibling: any;
                contains: (target: import("./src/model/node").default, deep?: boolean) => boolean;
                remove: () => void;
                insertChild: (child?: import("./src/model/node").default | import("./src/tree.type").FakeNode, index?: number, batch?: boolean) => void;
                insertBefore: (child: import("./src/model/node").default | import("./src/tree.type").FakeNode, ref: import("./src/model/node").default) => void;
                insertAfter: (child: import("./src/model/node").default | import("./src/tree.type").FakeNode, ref: import("./src/model/node").default) => void;
                removeChild: (child: import("./src/model/node").default) => void;
                removeChildByData: (data: import("./src/tree.type").TreeNodeData) => void;
                expand: (callback?: () => void, expandParent?: boolean) => void;
                doCreateChildren: (array: import("./src/tree.type").TreeNodeData[], defaultProps?: import("./src/tree.type").TreeNodeLoadedDefaultProps) => void;
                collapse: () => void;
                shouldLoadData: () => boolean;
                updateLeafState: () => void;
                setChecked: (value?: string | boolean, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
                getChildren: (forceInit?: boolean) => import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeNodeData[];
                updateChildren: () => void;
                loadData: (callback: (node: import("./src/model/node").default) => void, defaultProps?: import("./src/tree.type").TreeNodeLoadedDefaultProps) => void;
            };
        };
        root: {
            id: number;
            text: string;
            checked: boolean;
            indeterminate: boolean;
            data: {
                [x: string]: any;
            };
            expanded: boolean;
            parent: any;
            visible: boolean;
            isCurrent: boolean;
            store: any;
            isLeafByUser: boolean;
            isLeaf: boolean;
            canFocus: boolean;
            level: number;
            loaded: boolean;
            childNodes: any[];
            loading: boolean;
            initialize: () => void;
            setData: (data: import("./src/tree.type").TreeNodeData) => void;
            readonly label: string;
            readonly key: import("./src/tree.type").TreeKey;
            readonly disabled: boolean;
            readonly nextSibling: any;
            readonly previousSibling: any;
            contains: (target: import("./src/model/node").default, deep?: boolean) => boolean;
            remove: () => void;
            insertChild: (child?: import("./src/model/node").default | import("./src/tree.type").FakeNode, index?: number, batch?: boolean) => void;
            insertBefore: (child: import("./src/model/node").default | import("./src/tree.type").FakeNode, ref: import("./src/model/node").default) => void;
            insertAfter: (child: import("./src/model/node").default | import("./src/tree.type").FakeNode, ref: import("./src/model/node").default) => void;
            removeChild: (child: import("./src/model/node").default) => void;
            removeChildByData: (data: import("./src/tree.type").TreeNodeData) => void;
            expand: (callback?: () => void, expandParent?: boolean) => void;
            doCreateChildren: (array: import("./src/tree.type").TreeNodeData[], defaultProps?: import("./src/tree.type").TreeNodeLoadedDefaultProps) => void;
            collapse: () => void;
            shouldLoadData: () => boolean;
            updateLeafState: () => void;
            setChecked: (value?: string | boolean, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
            getChildren: (forceInit?: boolean) => import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeNodeData[];
            updateChildren: () => void;
            loadData: (callback: (node: import("./src/model/node").default) => void, defaultProps?: import("./src/tree.type").TreeNodeLoadedDefaultProps) => void;
        };
        data: {
            [x: string]: any;
        }[];
        lazy: boolean;
        load: import("./src/tree.type").LoadFunction;
        filterNodeMethod: import("./src/tree.type").FilterNodeMethodFunction;
        key: import("./src/tree.type").TreeKey;
        defaultCheckedKeys: import("./src/tree.type").TreeKey[];
        checkStrictly: boolean;
        defaultExpandedKeys: import("./src/tree.type").TreeKey[];
        autoExpandParent: boolean;
        defaultExpandAll: boolean;
        checkDescendants: boolean;
        props: {
            children: string;
            label: string;
            disabled: string;
            isLeaf?: boolean;
        };
        initialize: () => void;
        filter: (value: any) => void;
        setData: (newVal: import("./src/tree.type").TreeData) => void;
        getNode: (data: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => import("./src/model/node").default;
        insertBefore: (data: import("./src/tree.type").TreeNodeData, refData: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => void;
        insertAfter: (data: import("./src/tree.type").TreeNodeData, refData: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => void;
        remove: (data: import("./src/model/node").default | import("./src/tree.type").TreeNodeData) => void;
        append: (data: import("./src/tree.type").TreeNodeData, parentData: import("./src/model/node").default | import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => void;
        _initDefaultCheckedNodes: () => void;
        _initDefaultCheckedNode: (node: import("./src/model/node").default) => void;
        setDefaultCheckedKey: (newVal: import("./src/tree.type").TreeKey[]) => void;
        registerNode: (node: import("./src/model/node").default) => void;
        deregisterNode: (node: import("./src/model/node").default) => void;
        getCheckedNodes: (leafOnly?: boolean, includeHalfChecked?: boolean) => import("./src/tree.type").TreeNodeData[];
        getCheckedKeys: (leafOnly?: boolean) => import("./src/tree.type").TreeKey[];
        getHalfCheckedNodes: () => import("./src/tree.type").TreeNodeData[];
        getHalfCheckedKeys: () => import("./src/tree.type").TreeKey[];
        _getAllNodes: () => import("./src/model/node").default[];
        updateChildren: (key: import("./src/tree.type").TreeKey, data: import("./src/tree.type").TreeData) => void;
        _setCheckedKeys: (key: import("./src/tree.type").TreeKey, leafOnly: boolean, checkedKeys: {
            [key: string]: boolean;
        }) => void;
        setCheckedNodes: (array: import("./src/model/node").default[], leafOnly?: boolean) => void;
        setCheckedKeys: (keys: import("./src/tree.type").TreeKey[], leafOnly?: boolean) => void;
        setDefaultExpandedKeys: (keys: import("./src/tree.type").TreeKey[]) => void;
        setChecked: (data: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey, checked: boolean, deep: boolean) => void;
        getCurrentNode: () => import("./src/model/node").default;
        setCurrentNode: (currentNode: import("./src/model/node").default) => void;
        setUserCurrentNode: (node: import("./src/model/node").default, shouldAutoExpandParent?: boolean) => void;
        setCurrentNodeKey: (key: import("./src/tree.type").TreeKey, shouldAutoExpandParent?: boolean) => void;
    }>;
    root: import("vue").Ref<{
        id: number;
        text: string;
        checked: boolean;
        indeterminate: boolean;
        data: {
            [x: string]: any;
        };
        expanded: boolean;
        parent: any;
        visible: boolean;
        isCurrent: boolean;
        store: {
            currentNode: any;
            currentNodeKey: import("./src/tree.type").TreeKey;
            nodesMap: {
                [x: string]: any;
            };
            root: any;
            data: {
                [x: string]: any;
            }[];
            lazy: boolean;
            load: import("./src/tree.type").LoadFunction;
            filterNodeMethod: import("./src/tree.type").FilterNodeMethodFunction;
            key: import("./src/tree.type").TreeKey;
            defaultCheckedKeys: import("./src/tree.type").TreeKey[];
            checkStrictly: boolean;
            defaultExpandedKeys: import("./src/tree.type").TreeKey[];
            autoExpandParent: boolean;
            defaultExpandAll: boolean;
            checkDescendants: boolean;
            props: {
                children: string;
                label: string;
                disabled: string;
                isLeaf?: boolean;
            };
            initialize: () => void;
            filter: (value: any) => void;
            setData: (newVal: import("./src/tree.type").TreeData) => void;
            getNode: (data: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => import("./src/model/node").default;
            insertBefore: (data: import("./src/tree.type").TreeNodeData, refData: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => void;
            insertAfter: (data: import("./src/tree.type").TreeNodeData, refData: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => void;
            remove: (data: import("./src/model/node").default | import("./src/tree.type").TreeNodeData) => void;
            append: (data: import("./src/tree.type").TreeNodeData, parentData: import("./src/model/node").default | import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => void;
            _initDefaultCheckedNodes: () => void;
            _initDefaultCheckedNode: (node: import("./src/model/node").default) => void;
            setDefaultCheckedKey: (newVal: import("./src/tree.type").TreeKey[]) => void;
            registerNode: (node: import("./src/model/node").default) => void;
            deregisterNode: (node: import("./src/model/node").default) => void;
            getCheckedNodes: (leafOnly?: boolean, includeHalfChecked?: boolean) => import("./src/tree.type").TreeNodeData[];
            getCheckedKeys: (leafOnly?: boolean) => import("./src/tree.type").TreeKey[];
            getHalfCheckedNodes: () => import("./src/tree.type").TreeNodeData[];
            getHalfCheckedKeys: () => import("./src/tree.type").TreeKey[];
            _getAllNodes: () => import("./src/model/node").default[];
            updateChildren: (key: import("./src/tree.type").TreeKey, data: import("./src/tree.type").TreeData) => void;
            _setCheckedKeys: (key: import("./src/tree.type").TreeKey, leafOnly: boolean, checkedKeys: {
                [key: string]: boolean;
            }) => void;
            setCheckedNodes: (array: import("./src/model/node").default[], leafOnly?: boolean) => void;
            setCheckedKeys: (keys: import("./src/tree.type").TreeKey[], leafOnly?: boolean) => void;
            setDefaultExpandedKeys: (keys: import("./src/tree.type").TreeKey[]) => void;
            setChecked: (data: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey, checked: boolean, deep: boolean) => void;
            getCurrentNode: () => import("./src/model/node").default;
            setCurrentNode: (currentNode: import("./src/model/node").default) => void;
            setUserCurrentNode: (node: import("./src/model/node").default, shouldAutoExpandParent?: boolean) => void;
            setCurrentNodeKey: (key: import("./src/tree.type").TreeKey, shouldAutoExpandParent?: boolean) => void;
        };
        isLeafByUser: boolean;
        isLeaf: boolean;
        canFocus: boolean;
        level: number;
        loaded: boolean;
        childNodes: any[];
        loading: boolean;
        initialize: () => void;
        setData: (data: import("./src/tree.type").TreeNodeData) => void;
        readonly label: string;
        readonly key: import("./src/tree.type").TreeKey;
        readonly disabled: boolean;
        readonly nextSibling: any;
        readonly previousSibling: any;
        contains: (target: import("./src/model/node").default, deep?: boolean) => boolean;
        remove: () => void;
        insertChild: (child?: import("./src/model/node").default | import("./src/tree.type").FakeNode, index?: number, batch?: boolean) => void;
        insertBefore: (child: import("./src/model/node").default | import("./src/tree.type").FakeNode, ref: import("./src/model/node").default) => void;
        insertAfter: (child: import("./src/model/node").default | import("./src/tree.type").FakeNode, ref: import("./src/model/node").default) => void;
        removeChild: (child: import("./src/model/node").default) => void;
        removeChildByData: (data: import("./src/tree.type").TreeNodeData) => void;
        expand: (callback?: () => void, expandParent?: boolean) => void;
        doCreateChildren: (array: import("./src/tree.type").TreeNodeData[], defaultProps?: import("./src/tree.type").TreeNodeLoadedDefaultProps) => void;
        collapse: () => void;
        shouldLoadData: () => boolean;
        updateLeafState: () => void;
        setChecked: (value?: string | boolean, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
        getChildren: (forceInit?: boolean) => import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeNodeData[];
        updateChildren: () => void;
        loadData: (callback: (node: import("./src/model/node").default) => void, defaultProps?: import("./src/tree.type").TreeNodeLoadedDefaultProps) => void;
    }>;
    currentNode: import("vue").Ref<{
        id: number;
        text: string;
        checked: boolean;
        indeterminate: boolean;
        data: {
            [x: string]: any;
        };
        expanded: boolean;
        parent: any;
        visible: boolean;
        isCurrent: boolean;
        store: {
            currentNode: any;
            currentNodeKey: import("./src/tree.type").TreeKey;
            nodesMap: {
                [x: string]: any;
            };
            root: any;
            data: {
                [x: string]: any;
            }[];
            lazy: boolean;
            load: import("./src/tree.type").LoadFunction;
            filterNodeMethod: import("./src/tree.type").FilterNodeMethodFunction;
            key: import("./src/tree.type").TreeKey;
            defaultCheckedKeys: import("./src/tree.type").TreeKey[];
            checkStrictly: boolean;
            defaultExpandedKeys: import("./src/tree.type").TreeKey[];
            autoExpandParent: boolean;
            defaultExpandAll: boolean;
            checkDescendants: boolean;
            props: {
                children: string;
                label: string;
                disabled: string;
                isLeaf?: boolean;
            };
            initialize: () => void;
            filter: (value: any) => void;
            setData: (newVal: import("./src/tree.type").TreeData) => void;
            getNode: (data: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => import("./src/model/node").default;
            insertBefore: (data: import("./src/tree.type").TreeNodeData, refData: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => void;
            insertAfter: (data: import("./src/tree.type").TreeNodeData, refData: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => void;
            remove: (data: import("./src/model/node").default | import("./src/tree.type").TreeNodeData) => void;
            append: (data: import("./src/tree.type").TreeNodeData, parentData: import("./src/model/node").default | import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => void;
            _initDefaultCheckedNodes: () => void;
            _initDefaultCheckedNode: (node: import("./src/model/node").default) => void;
            setDefaultCheckedKey: (newVal: import("./src/tree.type").TreeKey[]) => void;
            registerNode: (node: import("./src/model/node").default) => void;
            deregisterNode: (node: import("./src/model/node").default) => void;
            getCheckedNodes: (leafOnly?: boolean, includeHalfChecked?: boolean) => import("./src/tree.type").TreeNodeData[];
            getCheckedKeys: (leafOnly?: boolean) => import("./src/tree.type").TreeKey[];
            getHalfCheckedNodes: () => import("./src/tree.type").TreeNodeData[];
            getHalfCheckedKeys: () => import("./src/tree.type").TreeKey[];
            _getAllNodes: () => import("./src/model/node").default[];
            updateChildren: (key: import("./src/tree.type").TreeKey, data: import("./src/tree.type").TreeData) => void;
            _setCheckedKeys: (key: import("./src/tree.type").TreeKey, leafOnly: boolean, checkedKeys: {
                [key: string]: boolean;
            }) => void;
            setCheckedNodes: (array: import("./src/model/node").default[], leafOnly?: boolean) => void;
            setCheckedKeys: (keys: import("./src/tree.type").TreeKey[], leafOnly?: boolean) => void;
            setDefaultExpandedKeys: (keys: import("./src/tree.type").TreeKey[]) => void;
            setChecked: (data: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey, checked: boolean, deep: boolean) => void;
            getCurrentNode: () => import("./src/model/node").default;
            setCurrentNode: (currentNode: import("./src/model/node").default) => void;
            setUserCurrentNode: (node: import("./src/model/node").default, shouldAutoExpandParent?: boolean) => void;
            setCurrentNodeKey: (key: import("./src/tree.type").TreeKey, shouldAutoExpandParent?: boolean) => void;
        };
        isLeafByUser: boolean;
        isLeaf: boolean;
        canFocus: boolean;
        level: number;
        loaded: boolean;
        childNodes: any[];
        loading: boolean;
        initialize: () => void;
        setData: (data: import("./src/tree.type").TreeNodeData) => void;
        readonly label: string;
        readonly key: import("./src/tree.type").TreeKey;
        readonly disabled: boolean;
        readonly nextSibling: any;
        readonly previousSibling: any;
        contains: (target: import("./src/model/node").default, deep?: boolean) => boolean;
        remove: () => void;
        insertChild: (child?: import("./src/model/node").default | import("./src/tree.type").FakeNode, index?: number, batch?: boolean) => void;
        insertBefore: (child: import("./src/model/node").default | import("./src/tree.type").FakeNode, ref: import("./src/model/node").default) => void;
        insertAfter: (child: import("./src/model/node").default | import("./src/tree.type").FakeNode, ref: import("./src/model/node").default) => void;
        removeChild: (child: import("./src/model/node").default) => void;
        removeChildByData: (data: import("./src/tree.type").TreeNodeData) => void;
        expand: (callback?: () => void, expandParent?: boolean) => void;
        doCreateChildren: (array: import("./src/tree.type").TreeNodeData[], defaultProps?: import("./src/tree.type").TreeNodeLoadedDefaultProps) => void;
        collapse: () => void;
        shouldLoadData: () => boolean;
        updateLeafState: () => void;
        setChecked: (value?: string | boolean, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
        getChildren: (forceInit?: boolean) => import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeNodeData[];
        updateChildren: () => void;
        loadData: (callback: (node: import("./src/model/node").default) => void, defaultProps?: import("./src/tree.type").TreeNodeLoadedDefaultProps) => void;
    }>;
    dragState: import("vue").Ref<{
        showDropIndicator: boolean;
        draggingNode: any;
        dropNode: any;
        allowDrop: boolean;
        dropType: any;
    }>;
    el$: import("vue").Ref<HTMLElement>;
    dropIndicator$: import("vue").Ref<HTMLElement>;
    isEmpty: import("vue").ComputedRef<boolean>;
    filter: (value: any) => void;
    getNodeKey: (node: import("./src/model/node").default) => any;
    getNodePath: (data: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => import("./src/tree.type").TreeNodeData[];
    getCheckedNodes: (leafOnly: boolean, includeHalfChecked: boolean) => import("./src/tree.type").TreeNodeData[];
    getCheckedKeys: (leafOnly: boolean) => import("./src/tree.type").TreeKey[];
    getCurrentNode: () => import("./src/tree.type").TreeNodeData;
    getCurrentKey: () => any;
    setCheckedNodes: (nodes: import("./src/model/node").default[], leafOnly: boolean) => void;
    setCheckedKeys: (keys: any, leafOnly: boolean) => void;
    setChecked: (data: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey, checked: boolean, deep: boolean) => void;
    getHalfCheckedNodes: () => import("./src/tree.type").TreeNodeData[];
    getHalfCheckedKeys: () => import("./src/tree.type").TreeKey[];
    setCurrentNode: (node: import("./src/model/node").default, shouldAutoExpandParent?: boolean) => void;
    setCurrentKey: (key: import("./src/tree.type").TreeKey, shouldAutoExpandParent?: boolean) => void;
    t: (...args: any[]) => string;
    getNode: (data: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => import("./src/model/node").default;
    remove: (data: import("./src/model/node").default | import("./src/tree.type").TreeNodeData) => void;
    append: (data: import("./src/tree.type").TreeNodeData, parentNode: import("./src/model/node").default | import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => void;
    insertBefore: (data: import("./src/tree.type").TreeNodeData, refNode: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => void;
    insertAfter: (data: import("./src/tree.type").TreeNodeData, refNode: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => void;
    handleNodeExpand: (nodeData: import("./src/tree.type").TreeNodeData, node: import("./src/model/node").default, instance: import("vue").ComponentInternalInstance) => void;
    updateKeyChildren: (key: import("./src/tree.type").TreeKey, data: import("./src/tree.type").TreeData) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("check" | "current-change" | "node-drag-start" | "node-drag-leave" | "node-drag-enter" | "node-drag-over" | "node-drag-end" | "node-drop" | "node-expand" | "check-change" | "node-click" | "node-contextmenu" | "node-collapse")[], "check" | "current-change" | "node-drag-start" | "node-drag-leave" | "node-drag-enter" | "node-drag-over" | "node-drag-end" | "node-drop" | "node-expand" | "check-change" | "node-click" | "node-contextmenu" | "node-collapse", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    props: Record<string, any>;
    draggable: boolean;
    checkStrictly: boolean;
    lazy: boolean;
    accordion: boolean;
    defaultExpandAll: boolean;
    indent: number;
    autoExpandParent: boolean;
    checkDescendants: boolean;
    renderAfterExpand: boolean;
    showCheckbox: boolean;
    expandOnClickNode: boolean;
    checkOnClickNode: boolean;
    highlightCurrent: boolean;
} & {
    load?: Function;
    data?: unknown[];
    iconClass?: string;
    emptyText?: string;
    renderContent?: Function;
    currentNodeKey?: string | number;
    filterNodeMethod?: Function;
    defaultCheckedKeys?: unknown[];
    defaultExpandedKeys?: unknown[];
    allowDrop?: Function;
    nodeKey?: string;
    allowDrag?: Function;
}>, {
    props: Record<string, any>;
    draggable: boolean;
    checkStrictly: boolean;
    lazy: boolean;
    accordion: boolean;
    defaultExpandAll: boolean;
    indent: number;
    autoExpandParent: boolean;
    checkDescendants: boolean;
    renderAfterExpand: boolean;
    showCheckbox: boolean;
    expandOnClickNode: boolean;
    checkOnClickNode: boolean;
    highlightCurrent: boolean;
}>>;
export default _Tree;
export declare const ElTree: SFCWithInstall<import("vue").DefineComponent<{
    data: {
        type: ArrayConstructor;
    };
    emptyText: {
        type: StringConstructor;
    };
    renderAfterExpand: {
        type: BooleanConstructor;
        default: boolean;
    };
    nodeKey: StringConstructor;
    checkStrictly: BooleanConstructor;
    defaultExpandAll: BooleanConstructor;
    expandOnClickNode: {
        type: BooleanConstructor;
        default: boolean;
    };
    checkOnClickNode: BooleanConstructor;
    checkDescendants: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoExpandParent: {
        type: BooleanConstructor;
        default: boolean;
    };
    defaultCheckedKeys: ArrayConstructor;
    defaultExpandedKeys: ArrayConstructor;
    currentNodeKey: import("vue").PropType<string | number>;
    renderContent: FunctionConstructor;
    showCheckbox: {
        type: BooleanConstructor;
        default: boolean;
    };
    draggable: {
        type: BooleanConstructor;
        default: boolean;
    };
    allowDrag: FunctionConstructor;
    allowDrop: FunctionConstructor;
    props: {
        type: ObjectConstructor;
        default(): {
            children: string;
            label: string;
            disabled: string;
        };
    };
    lazy: {
        type: BooleanConstructor;
        default: boolean;
    };
    highlightCurrent: BooleanConstructor;
    load: FunctionConstructor;
    filterNodeMethod: FunctionConstructor;
    accordion: BooleanConstructor;
    indent: {
        type: NumberConstructor;
        default: number;
    };
    iconClass: StringConstructor;
}, {
    store: import("vue").Ref<{
        currentNode: {
            id: number;
            text: string;
            checked: boolean;
            indeterminate: boolean;
            data: {
                [x: string]: any;
            };
            expanded: boolean;
            parent: any;
            visible: boolean;
            isCurrent: boolean;
            store: any;
            isLeafByUser: boolean;
            isLeaf: boolean;
            canFocus: boolean;
            level: number;
            loaded: boolean;
            childNodes: any[];
            loading: boolean;
            initialize: () => void;
            setData: (data: import("./src/tree.type").TreeNodeData) => void;
            readonly label: string;
            readonly key: import("./src/tree.type").TreeKey;
            readonly disabled: boolean;
            readonly nextSibling: any;
            readonly previousSibling: any;
            contains: (target: import("./src/model/node").default, deep?: boolean) => boolean;
            remove: () => void;
            insertChild: (child?: import("./src/model/node").default | import("./src/tree.type").FakeNode, index?: number, batch?: boolean) => void;
            insertBefore: (child: import("./src/model/node").default | import("./src/tree.type").FakeNode, ref: import("./src/model/node").default) => void;
            insertAfter: (child: import("./src/model/node").default | import("./src/tree.type").FakeNode, ref: import("./src/model/node").default) => void;
            removeChild: (child: import("./src/model/node").default) => void;
            removeChildByData: (data: import("./src/tree.type").TreeNodeData) => void;
            expand: (callback?: () => void, expandParent?: boolean) => void;
            doCreateChildren: (array: import("./src/tree.type").TreeNodeData[], defaultProps?: import("./src/tree.type").TreeNodeLoadedDefaultProps) => void;
            collapse: () => void;
            shouldLoadData: () => boolean;
            updateLeafState: () => void;
            setChecked: (value?: string | boolean, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
            getChildren: (forceInit?: boolean) => import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeNodeData[];
            updateChildren: () => void;
            loadData: (callback: (node: import("./src/model/node").default) => void, defaultProps?: import("./src/tree.type").TreeNodeLoadedDefaultProps) => void;
        };
        currentNodeKey: import("./src/tree.type").TreeKey;
        nodesMap: {
            [x: string]: {
                id: number;
                text: string;
                checked: boolean;
                indeterminate: boolean;
                data: {
                    [x: string]: any;
                };
                expanded: boolean;
                parent: any;
                visible: boolean;
                isCurrent: boolean;
                store: any;
                isLeafByUser: boolean;
                isLeaf: boolean;
                canFocus: boolean;
                level: number;
                loaded: boolean;
                childNodes: any[];
                loading: boolean;
                initialize: () => void;
                setData: (data: import("./src/tree.type").TreeNodeData) => void;
                readonly label: string;
                readonly key: import("./src/tree.type").TreeKey;
                readonly disabled: boolean;
                readonly nextSibling: any;
                readonly previousSibling: any;
                contains: (target: import("./src/model/node").default, deep?: boolean) => boolean;
                remove: () => void;
                insertChild: (child?: import("./src/model/node").default | import("./src/tree.type").FakeNode, index?: number, batch?: boolean) => void;
                insertBefore: (child: import("./src/model/node").default | import("./src/tree.type").FakeNode, ref: import("./src/model/node").default) => void;
                insertAfter: (child: import("./src/model/node").default | import("./src/tree.type").FakeNode, ref: import("./src/model/node").default) => void;
                removeChild: (child: import("./src/model/node").default) => void;
                removeChildByData: (data: import("./src/tree.type").TreeNodeData) => void;
                expand: (callback?: () => void, expandParent?: boolean) => void;
                doCreateChildren: (array: import("./src/tree.type").TreeNodeData[], defaultProps?: import("./src/tree.type").TreeNodeLoadedDefaultProps) => void;
                collapse: () => void;
                shouldLoadData: () => boolean;
                updateLeafState: () => void;
                setChecked: (value?: string | boolean, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
                getChildren: (forceInit?: boolean) => import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeNodeData[];
                updateChildren: () => void;
                loadData: (callback: (node: import("./src/model/node").default) => void, defaultProps?: import("./src/tree.type").TreeNodeLoadedDefaultProps) => void;
            };
        };
        root: {
            id: number;
            text: string;
            checked: boolean;
            indeterminate: boolean;
            data: {
                [x: string]: any;
            };
            expanded: boolean;
            parent: any;
            visible: boolean;
            isCurrent: boolean;
            store: any;
            isLeafByUser: boolean;
            isLeaf: boolean;
            canFocus: boolean;
            level: number;
            loaded: boolean;
            childNodes: any[];
            loading: boolean;
            initialize: () => void;
            setData: (data: import("./src/tree.type").TreeNodeData) => void;
            readonly label: string;
            readonly key: import("./src/tree.type").TreeKey;
            readonly disabled: boolean;
            readonly nextSibling: any;
            readonly previousSibling: any;
            contains: (target: import("./src/model/node").default, deep?: boolean) => boolean;
            remove: () => void;
            insertChild: (child?: import("./src/model/node").default | import("./src/tree.type").FakeNode, index?: number, batch?: boolean) => void;
            insertBefore: (child: import("./src/model/node").default | import("./src/tree.type").FakeNode, ref: import("./src/model/node").default) => void;
            insertAfter: (child: import("./src/model/node").default | import("./src/tree.type").FakeNode, ref: import("./src/model/node").default) => void;
            removeChild: (child: import("./src/model/node").default) => void;
            removeChildByData: (data: import("./src/tree.type").TreeNodeData) => void;
            expand: (callback?: () => void, expandParent?: boolean) => void;
            doCreateChildren: (array: import("./src/tree.type").TreeNodeData[], defaultProps?: import("./src/tree.type").TreeNodeLoadedDefaultProps) => void;
            collapse: () => void;
            shouldLoadData: () => boolean;
            updateLeafState: () => void;
            setChecked: (value?: string | boolean, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
            getChildren: (forceInit?: boolean) => import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeNodeData[];
            updateChildren: () => void;
            loadData: (callback: (node: import("./src/model/node").default) => void, defaultProps?: import("./src/tree.type").TreeNodeLoadedDefaultProps) => void;
        };
        data: {
            [x: string]: any;
        }[];
        lazy: boolean;
        load: import("./src/tree.type").LoadFunction;
        filterNodeMethod: import("./src/tree.type").FilterNodeMethodFunction;
        key: import("./src/tree.type").TreeKey;
        defaultCheckedKeys: import("./src/tree.type").TreeKey[];
        checkStrictly: boolean;
        defaultExpandedKeys: import("./src/tree.type").TreeKey[];
        autoExpandParent: boolean;
        defaultExpandAll: boolean;
        checkDescendants: boolean;
        props: {
            children: string;
            label: string;
            disabled: string;
            isLeaf?: boolean;
        };
        initialize: () => void;
        filter: (value: any) => void;
        setData: (newVal: import("./src/tree.type").TreeData) => void;
        getNode: (data: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => import("./src/model/node").default;
        insertBefore: (data: import("./src/tree.type").TreeNodeData, refData: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => void;
        insertAfter: (data: import("./src/tree.type").TreeNodeData, refData: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => void;
        remove: (data: import("./src/model/node").default | import("./src/tree.type").TreeNodeData) => void;
        append: (data: import("./src/tree.type").TreeNodeData, parentData: import("./src/model/node").default | import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => void;
        _initDefaultCheckedNodes: () => void;
        _initDefaultCheckedNode: (node: import("./src/model/node").default) => void;
        setDefaultCheckedKey: (newVal: import("./src/tree.type").TreeKey[]) => void;
        registerNode: (node: import("./src/model/node").default) => void;
        deregisterNode: (node: import("./src/model/node").default) => void;
        getCheckedNodes: (leafOnly?: boolean, includeHalfChecked?: boolean) => import("./src/tree.type").TreeNodeData[];
        getCheckedKeys: (leafOnly?: boolean) => import("./src/tree.type").TreeKey[];
        getHalfCheckedNodes: () => import("./src/tree.type").TreeNodeData[];
        getHalfCheckedKeys: () => import("./src/tree.type").TreeKey[];
        _getAllNodes: () => import("./src/model/node").default[];
        updateChildren: (key: import("./src/tree.type").TreeKey, data: import("./src/tree.type").TreeData) => void;
        _setCheckedKeys: (key: import("./src/tree.type").TreeKey, leafOnly: boolean, checkedKeys: {
            [key: string]: boolean;
        }) => void;
        setCheckedNodes: (array: import("./src/model/node").default[], leafOnly?: boolean) => void;
        setCheckedKeys: (keys: import("./src/tree.type").TreeKey[], leafOnly?: boolean) => void;
        setDefaultExpandedKeys: (keys: import("./src/tree.type").TreeKey[]) => void;
        setChecked: (data: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey, checked: boolean, deep: boolean) => void;
        getCurrentNode: () => import("./src/model/node").default;
        setCurrentNode: (currentNode: import("./src/model/node").default) => void;
        setUserCurrentNode: (node: import("./src/model/node").default, shouldAutoExpandParent?: boolean) => void;
        setCurrentNodeKey: (key: import("./src/tree.type").TreeKey, shouldAutoExpandParent?: boolean) => void;
    }>;
    root: import("vue").Ref<{
        id: number;
        text: string;
        checked: boolean;
        indeterminate: boolean;
        data: {
            [x: string]: any;
        };
        expanded: boolean;
        parent: any;
        visible: boolean;
        isCurrent: boolean;
        store: {
            currentNode: any;
            currentNodeKey: import("./src/tree.type").TreeKey;
            nodesMap: {
                [x: string]: any;
            };
            root: any;
            data: {
                [x: string]: any;
            }[];
            lazy: boolean;
            load: import("./src/tree.type").LoadFunction;
            filterNodeMethod: import("./src/tree.type").FilterNodeMethodFunction;
            key: import("./src/tree.type").TreeKey;
            defaultCheckedKeys: import("./src/tree.type").TreeKey[];
            checkStrictly: boolean;
            defaultExpandedKeys: import("./src/tree.type").TreeKey[];
            autoExpandParent: boolean;
            defaultExpandAll: boolean;
            checkDescendants: boolean;
            props: {
                children: string;
                label: string;
                disabled: string;
                isLeaf?: boolean;
            };
            initialize: () => void;
            filter: (value: any) => void;
            setData: (newVal: import("./src/tree.type").TreeData) => void;
            getNode: (data: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => import("./src/model/node").default;
            insertBefore: (data: import("./src/tree.type").TreeNodeData, refData: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => void;
            insertAfter: (data: import("./src/tree.type").TreeNodeData, refData: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => void;
            remove: (data: import("./src/model/node").default | import("./src/tree.type").TreeNodeData) => void;
            append: (data: import("./src/tree.type").TreeNodeData, parentData: import("./src/model/node").default | import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => void;
            _initDefaultCheckedNodes: () => void;
            _initDefaultCheckedNode: (node: import("./src/model/node").default) => void;
            setDefaultCheckedKey: (newVal: import("./src/tree.type").TreeKey[]) => void;
            registerNode: (node: import("./src/model/node").default) => void;
            deregisterNode: (node: import("./src/model/node").default) => void;
            getCheckedNodes: (leafOnly?: boolean, includeHalfChecked?: boolean) => import("./src/tree.type").TreeNodeData[];
            getCheckedKeys: (leafOnly?: boolean) => import("./src/tree.type").TreeKey[];
            getHalfCheckedNodes: () => import("./src/tree.type").TreeNodeData[];
            getHalfCheckedKeys: () => import("./src/tree.type").TreeKey[];
            _getAllNodes: () => import("./src/model/node").default[];
            updateChildren: (key: import("./src/tree.type").TreeKey, data: import("./src/tree.type").TreeData) => void;
            _setCheckedKeys: (key: import("./src/tree.type").TreeKey, leafOnly: boolean, checkedKeys: {
                [key: string]: boolean;
            }) => void;
            setCheckedNodes: (array: import("./src/model/node").default[], leafOnly?: boolean) => void;
            setCheckedKeys: (keys: import("./src/tree.type").TreeKey[], leafOnly?: boolean) => void;
            setDefaultExpandedKeys: (keys: import("./src/tree.type").TreeKey[]) => void;
            setChecked: (data: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey, checked: boolean, deep: boolean) => void;
            getCurrentNode: () => import("./src/model/node").default;
            setCurrentNode: (currentNode: import("./src/model/node").default) => void;
            setUserCurrentNode: (node: import("./src/model/node").default, shouldAutoExpandParent?: boolean) => void;
            setCurrentNodeKey: (key: import("./src/tree.type").TreeKey, shouldAutoExpandParent?: boolean) => void;
        };
        isLeafByUser: boolean;
        isLeaf: boolean;
        canFocus: boolean;
        level: number;
        loaded: boolean;
        childNodes: any[];
        loading: boolean;
        initialize: () => void;
        setData: (data: import("./src/tree.type").TreeNodeData) => void;
        readonly label: string;
        readonly key: import("./src/tree.type").TreeKey;
        readonly disabled: boolean;
        readonly nextSibling: any;
        readonly previousSibling: any;
        contains: (target: import("./src/model/node").default, deep?: boolean) => boolean;
        remove: () => void;
        insertChild: (child?: import("./src/model/node").default | import("./src/tree.type").FakeNode, index?: number, batch?: boolean) => void;
        insertBefore: (child: import("./src/model/node").default | import("./src/tree.type").FakeNode, ref: import("./src/model/node").default) => void;
        insertAfter: (child: import("./src/model/node").default | import("./src/tree.type").FakeNode, ref: import("./src/model/node").default) => void;
        removeChild: (child: import("./src/model/node").default) => void;
        removeChildByData: (data: import("./src/tree.type").TreeNodeData) => void;
        expand: (callback?: () => void, expandParent?: boolean) => void;
        doCreateChildren: (array: import("./src/tree.type").TreeNodeData[], defaultProps?: import("./src/tree.type").TreeNodeLoadedDefaultProps) => void;
        collapse: () => void;
        shouldLoadData: () => boolean;
        updateLeafState: () => void;
        setChecked: (value?: string | boolean, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
        getChildren: (forceInit?: boolean) => import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeNodeData[];
        updateChildren: () => void;
        loadData: (callback: (node: import("./src/model/node").default) => void, defaultProps?: import("./src/tree.type").TreeNodeLoadedDefaultProps) => void;
    }>;
    currentNode: import("vue").Ref<{
        id: number;
        text: string;
        checked: boolean;
        indeterminate: boolean;
        data: {
            [x: string]: any;
        };
        expanded: boolean;
        parent: any;
        visible: boolean;
        isCurrent: boolean;
        store: {
            currentNode: any;
            currentNodeKey: import("./src/tree.type").TreeKey;
            nodesMap: {
                [x: string]: any;
            };
            root: any;
            data: {
                [x: string]: any;
            }[];
            lazy: boolean;
            load: import("./src/tree.type").LoadFunction;
            filterNodeMethod: import("./src/tree.type").FilterNodeMethodFunction;
            key: import("./src/tree.type").TreeKey;
            defaultCheckedKeys: import("./src/tree.type").TreeKey[];
            checkStrictly: boolean;
            defaultExpandedKeys: import("./src/tree.type").TreeKey[];
            autoExpandParent: boolean;
            defaultExpandAll: boolean;
            checkDescendants: boolean;
            props: {
                children: string;
                label: string;
                disabled: string;
                isLeaf?: boolean;
            };
            initialize: () => void;
            filter: (value: any) => void;
            setData: (newVal: import("./src/tree.type").TreeData) => void;
            getNode: (data: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => import("./src/model/node").default;
            insertBefore: (data: import("./src/tree.type").TreeNodeData, refData: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => void;
            insertAfter: (data: import("./src/tree.type").TreeNodeData, refData: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => void;
            remove: (data: import("./src/model/node").default | import("./src/tree.type").TreeNodeData) => void;
            append: (data: import("./src/tree.type").TreeNodeData, parentData: import("./src/model/node").default | import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => void;
            _initDefaultCheckedNodes: () => void;
            _initDefaultCheckedNode: (node: import("./src/model/node").default) => void;
            setDefaultCheckedKey: (newVal: import("./src/tree.type").TreeKey[]) => void;
            registerNode: (node: import("./src/model/node").default) => void;
            deregisterNode: (node: import("./src/model/node").default) => void;
            getCheckedNodes: (leafOnly?: boolean, includeHalfChecked?: boolean) => import("./src/tree.type").TreeNodeData[];
            getCheckedKeys: (leafOnly?: boolean) => import("./src/tree.type").TreeKey[];
            getHalfCheckedNodes: () => import("./src/tree.type").TreeNodeData[];
            getHalfCheckedKeys: () => import("./src/tree.type").TreeKey[];
            _getAllNodes: () => import("./src/model/node").default[];
            updateChildren: (key: import("./src/tree.type").TreeKey, data: import("./src/tree.type").TreeData) => void;
            _setCheckedKeys: (key: import("./src/tree.type").TreeKey, leafOnly: boolean, checkedKeys: {
                [key: string]: boolean;
            }) => void;
            setCheckedNodes: (array: import("./src/model/node").default[], leafOnly?: boolean) => void;
            setCheckedKeys: (keys: import("./src/tree.type").TreeKey[], leafOnly?: boolean) => void;
            setDefaultExpandedKeys: (keys: import("./src/tree.type").TreeKey[]) => void;
            setChecked: (data: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey, checked: boolean, deep: boolean) => void;
            getCurrentNode: () => import("./src/model/node").default;
            setCurrentNode: (currentNode: import("./src/model/node").default) => void;
            setUserCurrentNode: (node: import("./src/model/node").default, shouldAutoExpandParent?: boolean) => void;
            setCurrentNodeKey: (key: import("./src/tree.type").TreeKey, shouldAutoExpandParent?: boolean) => void;
        };
        isLeafByUser: boolean;
        isLeaf: boolean;
        canFocus: boolean;
        level: number;
        loaded: boolean;
        childNodes: any[];
        loading: boolean;
        initialize: () => void;
        setData: (data: import("./src/tree.type").TreeNodeData) => void;
        readonly label: string;
        readonly key: import("./src/tree.type").TreeKey;
        readonly disabled: boolean;
        readonly nextSibling: any;
        readonly previousSibling: any;
        contains: (target: import("./src/model/node").default, deep?: boolean) => boolean;
        remove: () => void;
        insertChild: (child?: import("./src/model/node").default | import("./src/tree.type").FakeNode, index?: number, batch?: boolean) => void;
        insertBefore: (child: import("./src/model/node").default | import("./src/tree.type").FakeNode, ref: import("./src/model/node").default) => void;
        insertAfter: (child: import("./src/model/node").default | import("./src/tree.type").FakeNode, ref: import("./src/model/node").default) => void;
        removeChild: (child: import("./src/model/node").default) => void;
        removeChildByData: (data: import("./src/tree.type").TreeNodeData) => void;
        expand: (callback?: () => void, expandParent?: boolean) => void;
        doCreateChildren: (array: import("./src/tree.type").TreeNodeData[], defaultProps?: import("./src/tree.type").TreeNodeLoadedDefaultProps) => void;
        collapse: () => void;
        shouldLoadData: () => boolean;
        updateLeafState: () => void;
        setChecked: (value?: string | boolean, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
        getChildren: (forceInit?: boolean) => import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeNodeData[];
        updateChildren: () => void;
        loadData: (callback: (node: import("./src/model/node").default) => void, defaultProps?: import("./src/tree.type").TreeNodeLoadedDefaultProps) => void;
    }>;
    dragState: import("vue").Ref<{
        showDropIndicator: boolean;
        draggingNode: any;
        dropNode: any;
        allowDrop: boolean;
        dropType: any;
    }>;
    el$: import("vue").Ref<HTMLElement>;
    dropIndicator$: import("vue").Ref<HTMLElement>;
    isEmpty: import("vue").ComputedRef<boolean>;
    filter: (value: any) => void;
    getNodeKey: (node: import("./src/model/node").default) => any;
    getNodePath: (data: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => import("./src/tree.type").TreeNodeData[];
    getCheckedNodes: (leafOnly: boolean, includeHalfChecked: boolean) => import("./src/tree.type").TreeNodeData[];
    getCheckedKeys: (leafOnly: boolean) => import("./src/tree.type").TreeKey[];
    getCurrentNode: () => import("./src/tree.type").TreeNodeData;
    getCurrentKey: () => any;
    setCheckedNodes: (nodes: import("./src/model/node").default[], leafOnly: boolean) => void;
    setCheckedKeys: (keys: any, leafOnly: boolean) => void;
    setChecked: (data: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey, checked: boolean, deep: boolean) => void;
    getHalfCheckedNodes: () => import("./src/tree.type").TreeNodeData[];
    getHalfCheckedKeys: () => import("./src/tree.type").TreeKey[];
    setCurrentNode: (node: import("./src/model/node").default, shouldAutoExpandParent?: boolean) => void;
    setCurrentKey: (key: import("./src/tree.type").TreeKey, shouldAutoExpandParent?: boolean) => void;
    t: (...args: any[]) => string;
    getNode: (data: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => import("./src/model/node").default;
    remove: (data: import("./src/model/node").default | import("./src/tree.type").TreeNodeData) => void;
    append: (data: import("./src/tree.type").TreeNodeData, parentNode: import("./src/model/node").default | import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => void;
    insertBefore: (data: import("./src/tree.type").TreeNodeData, refNode: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => void;
    insertAfter: (data: import("./src/tree.type").TreeNodeData, refNode: import("./src/tree.type").TreeNodeData | import("./src/tree.type").TreeKey) => void;
    handleNodeExpand: (nodeData: import("./src/tree.type").TreeNodeData, node: import("./src/model/node").default, instance: import("vue").ComponentInternalInstance) => void;
    updateKeyChildren: (key: import("./src/tree.type").TreeKey, data: import("./src/tree.type").TreeData) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("check" | "current-change" | "node-drag-start" | "node-drag-leave" | "node-drag-enter" | "node-drag-over" | "node-drag-end" | "node-drop" | "node-expand" | "check-change" | "node-click" | "node-contextmenu" | "node-collapse")[], "check" | "current-change" | "node-drag-start" | "node-drag-leave" | "node-drag-enter" | "node-drag-over" | "node-drag-end" | "node-drop" | "node-expand" | "check-change" | "node-click" | "node-contextmenu" | "node-collapse", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    props: Record<string, any>;
    draggable: boolean;
    checkStrictly: boolean;
    lazy: boolean;
    accordion: boolean;
    defaultExpandAll: boolean;
    indent: number;
    autoExpandParent: boolean;
    checkDescendants: boolean;
    renderAfterExpand: boolean;
    showCheckbox: boolean;
    expandOnClickNode: boolean;
    checkOnClickNode: boolean;
    highlightCurrent: boolean;
} & {
    load?: Function;
    data?: unknown[];
    iconClass?: string;
    emptyText?: string;
    renderContent?: Function;
    currentNodeKey?: string | number;
    filterNodeMethod?: Function;
    defaultCheckedKeys?: unknown[];
    defaultExpandedKeys?: unknown[];
    allowDrop?: Function;
    nodeKey?: string;
    allowDrag?: Function;
}>, {
    props: Record<string, any>;
    draggable: boolean;
    checkStrictly: boolean;
    lazy: boolean;
    accordion: boolean;
    defaultExpandAll: boolean;
    indent: number;
    autoExpandParent: boolean;
    checkDescendants: boolean;
    renderAfterExpand: boolean;
    showCheckbox: boolean;
    expandOnClickNode: boolean;
    checkOnClickNode: boolean;
    highlightCurrent: boolean;
}>>;
